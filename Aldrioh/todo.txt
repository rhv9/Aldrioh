
Ideas:
- Jumping to blocks
- Wall jump
- Grabbing the edge of blocks
- Wall climbing sections
- Infinite run mode

Idea of what a Level consists of:
- Regions, each region will have a way to finish them.
- Types of regions: Objective based, Non objective based.
- ^ I CAN'T THINK ON HOW TO IMPLEMENT THIS!

Engine Improvements:
- Complete the callback system for inputs, so can remove callbacks.
- Scene can handle more than one camera.
- Basic stopping player movement with ahead check of tile
- Decide on how cameraController should be stored in CameraComponent
- Scriptable components.
- Batch rendering


Todo: LEVEL EDITOR
- Be able to switch back and forth between editor and game layer

v0.22
- Shader Manager class
- Main shader supports overwritting colour.
Todo: 
- Be able to use different shaders
- RenderQueue draws each shader separately
Removed:
- Renderer supports passing in shaders and data to set uniform 
	-> Cancel this, for now make a new render api for each shader

v0.21
- Imgui dedicated to level
- Switch over to a level editor level
- Cleaned up imgui common windows.

v0.20
- Layered rendering system
- Select layer to render
- Render Queue system
- Render flushing


v0.17
- Fireball has collision box and one shots enemies
- Enemies spawner tile that spawns enemies within 7 x 7 area
- Tile objects


v0.16
- collision dispatcher ordering entity for easier coding
- Clean up components
- Clean up systems
- Different collision causes different responses.
- Put world into a component - into a level class
- Added injecting rendering systems for components and moved rendering entities and
	into it.
- Added test update and render systems to quickly try things.


v0.15
Done
- Entity collisions
- different collision causes different responses.
- Wrapped everything into entity
- Wrapped into scene
- Moved player controller to a player controller system
- Use wrapped entity and scene
- Remove the level class as I don't see a use for it.